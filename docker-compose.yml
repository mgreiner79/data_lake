version: "3.9"

# environment variables declared in dev.env are available throughout all containers
x-env_and_net_defaults: &env_and_net_defaults
  init: true # best practice see https://medium.com/factualopinions/docker-compose-tricks-and-best-practices-5e7e43eba8eb
  env_file:
    - dev.env
  networks: # containers run all in same subnet
    - mpicecnet

services:
  #run ldap server todo use alpine based https://hub.docker.com/r/danielguerra/alpine-openldap
  ldap_server:
    <<: *env_and_net_defaults
    container_name: ldap_server
    build: ./ms_ldap
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5
    ports:
      - 389:389
      - 636:636
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d

  # run admin interface for ldap server
  ldap_server_admin: # admin login is: cn=admin,dc=mpicec,dc=local
    <<: *env_and_net_defaults
    container_name: ldap_server_admin
    image: osixia/phpldapadmin:latest
    mem_limit: 512m
    mem_reservation: 128M
    ports:
      - 8090:80

  # run minio service
  minio:
    <<: *env_and_net_defaults
    container_name: minio
    image: quay.io/minio/minio
    mem_limit: 1024m
    mem_reservation: 128M
    hostname: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data

  # run minio configuration of using ldap for credentials
  minio_config:
    <<: *env_and_net_defaults
    container_name: minio_config
    image: minio/mc:latest
    depends_on:
      - minio
      - ldap_server
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host rm local;
      /usr/bin/mc alias set minio http://minio:9000 minio minio123;
      /usr/bin/mc admin config set minio identity_ldap server_addr='ldap_server:389' tls_skip_verify='on' server_insecure='on' lookup_bind_dn='cn=admin,dc=mpicec,dc=local' lookup_bind_password='test1234' user_dn_search_base_dn='dc=mpicec,dc=local' user_dn_search_filter='(&(objectClass=posixAccount)(uid=%s))' group_search_filter='(&(objectClass=posixAccount)(uid=%s))' group_search_base_dn='dc=mpicec,dc=local' ;
      /usr/bin/mc admin service restart minio;
      /usr/bin/mc admin policy set minio consoleAdmin user='cn=minioadmin,dc=mpicec,dc=local';
      /usr/bin/mc admin policy set minio readwrite,diagnostics user='cn=testuser,ou=users,dc=mpicec,dc=local';
      exit 0;
      "

  # run postgres database service
  postgres:
    <<: *env_and_net_defaults
    container_name: postgres
    build: ./ms_postgres
    mem_limit: 512m
    mem_reservation: 128m
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/data/postgres
    restart: always

  # run jupyterlab
  jupyterlab:
    <<: *env_and_net_defaults
    container_name: ms_jupyterlab
    build: ms_jupyterlab #image: jupyter/base-notebook:latest
    mem_limit: 1024m
    mem_reservation: 128m
    volumes:
      - ./notebooks/:/notebooks
    ports:
      - "8888:8888"

  # run neo4j used by amundsen
  neo4j:
    <<: *env_and_net_defaults
    container_name: neo4j
    build: ./ms_neo4j
    mem_limit: 1024m
    mem_reservation: 128m
    ulimits:
      nofile:
        soft: 40000
        hard: 40000
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ./ms_neo4j/conf:/var/lib/neo4j/conf
      - ./ms_neo4j/plugins:/var/lib/neo4j/plugins
      - ./ms_neo4j/backup:/backup
      - neo4j_data:/data #/var/lib/neo4j/data

  # elastic search used by amundsen
  elasticsearch:
    <<: *env_and_net_defaults
    container_name: elasticsearch
    #image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.0" # 7.14.1
    build: ./ms_elasticsearch
    mem_limit: 1024m
    mem_reservation: 128m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/var/lib/elasticsearch/data      #- es_data:/usr/share/elasticsearch/data
    environment:
      discovery.type: single-node
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # run amundsen search interface
  amundsensearch:
    <<: *env_and_net_defaults
    build: ./ms_amundsen_search
    # image: amundsendev/amundsen-search:3.0.0 # 2.11.1
    container_name: amundsensearch
    mem_limit: 128m
    mem_reservation: 128m
    ports:
      - 5001:5000
    depends_on:
      - elasticsearch 
    # command: gunicorn -w 2 --bind :5000 search_service.search_wsgi

  # run amundsen metadata service
  amundsenmetadata:
    <<: *env_and_net_defaults
    build: ./ms_amundsen_metadata 
    #image: amundsendev/amundsen-metadata:3.10.0 # 3.9.0
    container_name: amundsenmetadata
    mem_limit: 128m
    mem_reservation: 128m
    depends_on:
      - neo4j
    ports:
      - 5002:5000
    environment:
      - PROXY_HOST=bolt://neo4j
    #command: gunicorn -w 2 --bind :5000 metadata_service.metadata_wsgi

  # run amundsen frontend service
  amundsenfrontend:
    <<: *env_and_net_defaults
    build: ./ms_amundsen_frontend
    #image: amundsendev/amundsen-frontend:4.0.0 #3.12.0
    container_name: amundsenfrontend
    mem_limit: 512m
    mem_reservation: 128m
    depends_on:
      - amundsenmetadata
      - amundsensearch
    ports:
      - 5000:5000
    #command: gunicorn -w 2 --bind :5000 amundsen_application.wsgi

  # reverse proxy
  nginx:
    <<: *env_and_net_defaults
    build: ./ms_nginx
    container_name: nginx
    mem_limit: 512m
    mem_reservation: 128m
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - ./ms_django/staticfiles:/media
      - ssl_cert:/etc/letsencrypt/
    depends_on:
      - django

  # web apis 
  django:
    <<: *env_and_net_defaults
    container_name: django
    build: ./ms_django
    mem_limit: 1024m
    mem_reservation: 128m
    #command: gunicorn config.wsgi -b 0.0.0.0:8000 
    command: /usr/local/bin/python3 /code/manage.py runserver 0.0.0.0:8000
    volumes:
      - ./mpicec/django:/code
    expose: # only exposed to other services
      - 8000
    ports:
      - 8000:8000
    depends_on:
      - postgres

  # used by django and airflow
  redis:
    <<: *env_and_net_defaults
    container_name: redis
    image: "redis:alpine"
    mem_limit: 512m
    mem_reservation: 128m
    environment:
      ALLOW_EMPTY_PASSWORD: "yes" # only for dev
    restart: always

  # used by django and airflow; important for scalability; todo health checks
  celery:
    <<: *env_and_net_defaults
    build: ./ms_django
    container_name: celery
    mem_limit: 512m
    mem_reservation: 128m
    command: /usr/local/bin/celery -A config worker -l info # clever!
    volumes:
      - ./mpicec/django:/code

    depends_on:
      - postgres
      - redis
 
  # airflow-webserver; todo health checks; responsible cataloging and etl 
  airflow: 
    <<: *env_and_net_defaults
    container_name: airflow
    build: ./ms_airflow
    mem_limit: 1024m
    ports:
      - 8080:8080
    volumes:
      - ./mpicec:/home/airflow/dags

  # bi tool 
  superset:
    <<: *env_and_net_defaults
    container_name: superset
    mem_limit: 1024m
    build: ./ms_superset
    ports:
      - 8088:8088
    

networks:
  mpicecnet:

volumes:
  files:
  pgdata:
  miniodata:
  neo4j_data:
  es_data:
  ldap_data:
  ldap_config:
  # airflow_scheduler_data:
  # airflow_worker_data:
  # airflow_data:
  redis_data:
  ssl_cert:
